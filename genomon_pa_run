# -*- coding: utf-8 -*-
"""
Created on Wed Dec 02 17:43:52 2015

@author: okada

$Id: genomon_pa_run 92 2015-12-14 08:06:48Z aokada $
$Rev: 92 $
"""

def call_image_capture(mode, output_dir, genomon_root, t_config, g_config):
    
    print "=== [%s] create script file, for IGV image capture. ===" % mode
    
    from genomon_post_analysis import tools
    from genomon_post_analysis import capture
    import os
    import glob
    
    # output dirs
    output_dir = os.path.abspath(output_dir) + "/" + mode
    
    if (os.path.exists(output_dir) == False):
        os.mkdir(output_dir)
    if (os.path.exists(output_dir + "/capture") == False):
        os.mkdir(output_dir + "/capture")
        
    # result files
    [section_in, section_out] = tools.get_section(mode)
    input_file_pattern = "%s/%s/*/*%s" % (genomon_root, mode, t_config.get(section_in, "suffix"))
    files = glob.glob(input_file_pattern)
    
    files_capt = []
    for f in files:
        ID = tools.getID(f, mode, t_config)
        yml = genomon_root + "/sv/config/" + ID + ".yaml"
        f_capt = "%s/capture/capture_%s.bat" % (output_dir, ID)
        if capture.write_capture_bat(f, f_capt, output_dir, ID, mode, yml, t_config) == True:
            files_capt.append(f_capt)
    
    capture.merge_capture_bat(files_capt, output_dir + "/capture/capture.bat", True)

def call_bam_pickup(mode, output_dir, genomon_root, t_config, g_config):
    
    print "=== [%s] create script file, for bam pick up. ===" % mode
    
    from genomon_post_analysis import tools
    from genomon_post_analysis import capture
    import os
    import glob
    
    # output dirs
    output_dir = os.path.abspath(output_dir) + "/" + mode
    
    if (os.path.exists(output_dir) == False):
        os.mkdir(output_dir)
    if (os.path.exists(output_dir + "/log") == False):
        os.mkdir(output_dir + "/log")
    if (os.path.exists(output_dir + "/bam") == False):
        os.mkdir(output_dir + "/bam")
    if (os.path.exists(output_dir + "/bam_script") == False):
        os.mkdir(output_dir + "/bam_script")
        
    # result files
    [section_in, section_out] = tools.get_section(mode)
    input_file_pattern = "%s/%s/*/*%s" % (genomon_root, mode, t_config.get(section_in, "suffix"))
    files = glob.glob(input_file_pattern)
    
    files_pick = []
    for f in files:
        ID = tools.getID(f, mode, t_config)
        yml = genomon_root + "/sv/config/" + ID + ".yaml"
        f_pick = "%s/bam_script/pickup.%s.sh" % (output_dir, ID)
        if capture.write_pickup_script(f, f_pick, output_dir, ID, mode, yml, t_config, g_config) == True:
            files_pick.append(f_pick)
    
    capture.merge_pickup_script(files_pick, output_dir + "/bam_script/pickup.sh")
    
def call_summary(mode, output_dir, genomon_root, t_config, g_config):
    
    print "=== [%s] merge summary file. ===" % mode
    
    from genomon_post_analysis import tools
    from genomon_post_analysis import capture
    import os
    import glob
    
    # output dirs
    output_dir = os.path.abspath(output_dir) + "/" + mode
    
    if (os.path.exists(output_dir) == False):
        os.mkdir(output_dir)
        
    # result files
    [section_in, section_out] = tools.get_section(mode)
    input_file_pattern = "%s/%s/*/*%s" % (genomon_root, mode, t_config.get(section_in, "suffix"))
    files = glob.glob(input_file_pattern)
    capture.merge_result(files, output_dir + "/merge.csv", mode, t_config)
    
def main():
    from genomon_post_analysis import tools
    import os
    import argparse
    
    parser = argparse.ArgumentParser(prog = "genomon_post_analysis")
    
    parser.add_argument("--version", action = "version", version = "genomon_post_analysis_v0.1")
    parser.add_argument('mode', choices=['mutation', 'sv', 'summary', 'all'], help = "analysis type")
    parser.add_argument("output_dir", help = "output file path", type = str)
    parser.add_argument("genomon_root", help = "output file path", type = str)
    parser.add_argument("--task_config_file", help = "config file", type = str, default = "")
    parser.add_argument("--genomon_config_file", help = "config file", type = str, default = "")

    args = parser.parse_args()
    
    # dirs
    output_dir = os.path.abspath(args.output_dir)
    if (os.path.exists(output_dir) == False):
        os.mkdir(output_dir)
        
    genomon_root = os.path.abspath(args.genomon_root)
    
    # config
    if len(args.task_config_file) > 0:
        [t_config, t_conf_file] = tools.load_config(args.task_config_file)
    else:
        [t_config, t_conf_file] = tools.load_config("")

    if len(args.genomon_config_file) > 0:
        [g_config, g_conf_file] = tools.load_config(args.genomon_config_file)
    else:
        [g_config, g_conf_file] = tools.load_config("")
    
    # call functions
    if args.mode == "all":
        call_image_capture("sv", output_dir, genomon_root, t_config, g_config)
        call_bam_pickup("sv", output_dir, genomon_root, t_config, g_config)
        call_summary("sv", output_dir, genomon_root, t_config, g_config)

        call_image_capture("mutation", output_dir, genomon_root, t_config, g_config)
        call_bam_pickup("mutation", output_dir, genomon_root, t_config, g_config)
        call_summary("mutation", output_dir, genomon_root, t_config, g_config)
        
        call_summary("summary", output_dir, genomon_root, t_config, g_config)

    elif args.mode == "summary":
        call_summary("summary", output_dir, genomon_root, t_config, g_config)
        
    else:
        call_image_capture(args.mode, output_dir, genomon_root, t_config, g_config)
        call_bam_pickup(args.mode, output_dir, genomon_root, t_config, g_config)
        call_summary(args.mode, output_dir, genomon_root, t_config, g_config)
                
if __name__ == "__main__":
    main()
    
